import os
import logging
import asyncio

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

from app.keyboards import main as kb
from app.commands import set_commands

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–∞–º–∞
REMINDER_DURATION = 30  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ø–∞–º–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
REMINDER_INTERVAL = 1  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ —Å–ø–∞–º–∞
spam_flags = {}


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserStates(StatesGroup):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    waiting_for_meal_time = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
    waiting_for_reminder_minutes = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–±–æ—Ä –∫—Ä–æ–≤–∏ –ø–æ—Å–ª–µ –µ–¥—ã.\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏, –≤–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –ø–æ–µ–ª (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):",
        reply_markup=kb,
    )
    await state.set_state(UserStates.waiting_for_meal_time)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
@dp.message(UserStates.waiting_for_meal_time)
async def process_meal_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏."""
    meal_time = message.text
    logging.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –≤—Ä–µ–º—è: {meal_time}.")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        hours, minutes = map(int, meal_time.split(':'))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            await state.update_data(meal_time=meal_time)
            await message.answer(
                "–û—Ç–ª–∏—á–Ω–æ! üïí\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏, —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å "
                "–æ –∑–∞–±–æ—Ä–µ –∫—Ä–æ–≤–∏.\n\n"
                "–ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –∏–ª–∏ 120):"
            )
            await state.set_state(UserStates.waiting_for_reminder_minutes)
        else:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è: {meal_time}.")
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)."
            )
    except ValueError:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {meal_time}.")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)."
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö
@dp.message(UserStates.waiting_for_reminder_minutes)
async def process_reminder_minutes(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    try:
        reminder_minutes = int(message.text)
        if reminder_minutes < 0:
            logging.warning(
                f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç: {reminder_minutes}.")
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç."
            )
            return

        user_data = await state.get_data()
        meal_time = user_data['meal_time']
        hours, minutes = map(int, meal_time.split(':'))

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        meal_datetime = datetime.now().replace(
            hour=hours, minute=minutes, second=0, microsecond=0)
        reminder_datetime = meal_datetime + timedelta(minutes=reminder_minutes)

        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ "
            f"–Ω–∞ {reminder_datetime.strftime('%H:%M')}."
        )

        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª.\n\n"
            f"–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ –∑–∞–±–æ—Ä–µ –∫—Ä–æ–≤–∏ –≤ "
            f"{reminder_datetime.strftime('%H:%M')}.\n\n"
            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start."
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        spam_flags[message.chat.id] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–ø–∞–º–∞
        scheduler.add_job(
            send_reminder,
            'date',
            run_date=reminder_datetime,
            args=(message.chat.id,)
        )

        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    except ValueError:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∏–Ω—É—Ç: {message.text}.")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30 –∏–ª–∏ 120)."
        )


async def send_reminder(chat_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–±–æ—Ä–µ –∫—Ä–æ–≤–∏."""
    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")

    # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ø–∞–º–∞
    start_time = asyncio.get_event_loop().time()

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ REMINDER_DURATION —Å–µ–∫—É–Ω–¥
    while asyncio.get_event_loop().time() - start_time < REMINDER_DURATION:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–ø–∞–º
        if not spam_flags.get(chat_id, True):
            logging.info(f"–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
            break

        try:
            await bot.send_message(
                chat_id,
                "‚è∞ –í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –∑–∞–±–æ—Ä –∫—Ä–æ–≤–∏!\n\n"
                "–ù–µ –∑–∞–±—É–¥—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–±–æ—Ä –∫—Ä–æ–≤–∏, –∫–∞–∫ –º—ã –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å. üòä"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await asyncio.sleep(REMINDER_INTERVAL)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

    logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")
    spam_flags.pop(chat_id, None)  # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
@dp.message(lambda message: message.text == '–°—Ç–∞—Ä—Ç')
async def handle_start_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ä—Ç'."""
    await cmd_start(message, state)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
@dp.message(lambda message: message.text == '–°—Ç–æ–ø')
async def handle_stop_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°—Ç–æ–ø'."""
    spam_flags[message.chat.id] = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∞–º
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–°–ø–∞–º –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.")
    scheduler.start()
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler("bot.log", encoding="utf-8")
            ]
        )
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
